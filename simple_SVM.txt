# Dataset Path
data_path = 'D:/NCI/Sem 3/Thesis/code_DB/dataset'
#classes
class_labels = ['belly_pain', 'burping', 'discomfort', 'hungry', 'tired']

# Initialize lists to hold features and labels
X = []
y = []

# Parameters for MFCC
n_mfcc = 13  # Number of MFCC features to extract
max_pad_len = 174  # Ensure all audio files have the same length

results_df = pd.DataFrame(columns=['Model', 'Accuracy'])


def extract_mfcc(file_path):
    """Extract MFCC features from a given audio file."""
    audio, sample_rate = librosa.load(file_path, res_type='kaiser_fast')
    mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=n_mfcc)
    # Pad or truncate the MFCCs to a fixed length
    pad_width = max_pad_len - mfccs.shape[1]
    if pad_width > 0:
        mfccs = np.pad(mfccs, pad_width=((0, 0), (0, pad_width)), mode='constant')
    else:
        mfccs = mfccs[:, :max_pad_len]
    return mfccs


# Loop through each class folder and extract MFCCs
for i, label in enumerate(class_labels):
    folder_path = os.path.join(data_path, label)
    for file_name in os.listdir(folder_path):
        if file_name.endswith('.wav'):
            file_path = os.path.join(folder_path, file_name)
            mfcc = extract_mfcc(file_path)
            X.append(mfcc)
            y.append(i)  # Store the class label as an integer
# Convert to numpy arrays
X = np.array(X)
y = np.array(y)

# Reshape X to be suitable for the SVM
X = X.reshape(X.shape[0], -1)  # Flatten the MFCC array
print(f'Extracted {X.shape[0]} samples with shape {X.shape}')
## Simple models with original data
#Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Initializing the SVM model
svm_model = SVC(kernel='linear')
# Training the SVM model
svm_model.fit(X_train, y_train)
# Making predictions
y_pred = svm_model.predict(X_test)
# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')
new_row = pd.DataFrame([["SVM (simple)", accuracy]], columns=['Model', 'Accuracy'])
results_df = pd.concat([results_df, new_row], ignore_index=True)
results_df
#results_df = pd.DataFrame(columns=['Model', 'Accuracy'])
# Printing classification report
print(classification_report(y_test, y_pred, target_names=class_labels))
# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)

# Plotting the confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix:SVM')
plt.show()